/*
This script generates a comprehensive test dataset with:
- 50 employees
- 4 template types and 10 print templates
- 200 organizations (clients)
- 5 select types
- 7 work statuses
- 200 different test types (analiz)
- 50,000 work orders (works)
- Approximately 150,000 work items (average 3 per order)

The data includes realistic relationships between tables and variations in statuses, completion dates, and other attributes to simulate a real laboratory information system.

Generated by: DeepSeek-V3
Prompt: "(Create objects.sql script)... Generate test data for all tables from the provided script with 50,000 orders with an average number of items per order equal to 3"
*/

-- Clear existing data if needed (optional)
-- DELETE FROM [dbo].[WorkItem];
-- DELETE FROM [dbo].[Works];
-- DELETE FROM [dbo].[Analiz];
-- DELETE FROM [dbo].[WorkStatus];
-- DELETE FROM [dbo].[SelectType];
-- DELETE FROM [dbo].[Organization];
-- DELETE FROM [dbo].[PrintTemplate];
-- DELETE FROM [dbo].[TemplateType];
-- DELETE FROM [dbo].[Employee];

-- Generate 50 employee records with guaranteed unique login names using NEWID()
INSERT INTO [dbo].[Employee] ([Name], [Patronymic], [Surname], [Email], [Post], [CreateDate], [Archived], [IS_Role], [Role], [Login_Name])
SELECT 
    fn.name,
    CASE WHEN RAND() > 0.3 THEN mn.name ELSE '' END,
    ln.name,
    CASE WHEN RAND() > 0.2 THEN LOWER(fn.name + '.' + ln.name + '@lab.com') ELSE NULL END,
    CASE 
        WHEN n % 10 = 0 THEN 'Lab Director'
        WHEN n % 5 = 0 THEN 'Senior Technician'
        WHEN n % 3 = 0 THEN 'Technician'
        ELSE 'Assistant'
    END,
    DATEADD(DAY, -(ABS(CHECKSUM(NEWID())) % 1000), GETDATE()),
    CASE WHEN n % 20 = 0 THEN 1 ELSE 0 END,
    CASE WHEN n % 10 = 0 THEN 1 ELSE 0 END,
    CASE 
        WHEN n % 10 = 0 THEN 3 -- Admin
        WHEN n % 5 = 0 THEN 2 -- Manager
        ELSE 1 -- Regular
    END,
    -- Guaranteed unique login name using first letter + first 5 of last name + GUID portion
    LOWER(LEFT(fn.name, 1) + LEFT(ln.name, 5) + SUBSTRING(REPLACE(CAST(NEWID() AS VARCHAR(36)), '-', ''), 1, 8))
FROM 
    (SELECT TOP 50 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as n 
    FROM master.dbo.spt_values WHERE number < 500) nums,
    (VALUES ('John'),('Michael'),('David'),('Robert'),('James'),('Mary'),('Jennifer'),('Lisa'),('Susan'),('Karen')) fn(name),
    (VALUES ('Smith'),('Johnson'),('Williams'),('Brown'),('Jones'),('Miller'),('Davis'),('Garcia'),('Rodriguez'),('Wilson')) ln(name),
    (VALUES ('A.'),('B.'),('C.'),('D.'),('E.'),('F.'),('G.'),('H.'),('I.'),('J.')) mn(name);

-- Template Types
INSERT INTO [dbo].[TemplateType] ([TemlateVal], [Comment])
VALUES 
('Standard', 'Default template for most organizations'),
('Premium', 'Enhanced template with additional details'),
('Compact', 'Minimalist template for high-volume clients'),
('Detailed', 'Template with full analysis details');

-- Print Templates
INSERT INTO [dbo].[PrintTemplate] ([TemplateName], [CreateDate], [Ext], [Comment], [Id_TemplateType])
SELECT 
    'Template_' + CAST(ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as nvarchar(50)),
    DATEADD(DAY, -(ABS(CHECKSUM(NEWID())) % 365), GETDATE()),
    CASE WHEN RAND() > 0.5 THEN 'docx' ELSE 'pdf' END,
    CASE 
        WHEN n % 4 = 0 THEN 'Standard reporting template'
        WHEN n % 3 = 0 THEN 'Custom template for large clients'
        WHEN n % 2 = 0 THEN 'Basic results template'
        ELSE 'Comprehensive analysis report'
    END,
    (SELECT TOP 1 Id_TemplateType FROM [dbo].[TemplateType] ORDER BY NEWID())
FROM (SELECT TOP 10 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as n FROM master.dbo.spt_values WHERE number < 10) nums;

-- Organizations (200 records)
INSERT INTO [dbo].[Organization] ([ORG_NAME], [TEMPLATE_FN], [Id_PrintTemplate], [Email], [SecondEmail], [Fax], [SecondFax])
SELECT 
    CASE 
        WHEN n % 10 = 0 THEN 'City Hospital ' + CAST(n as varchar(10))
        WHEN n % 7 = 0 THEN 'Regional Medical Center ' + CAST(n as varchar(10))
        WHEN n % 5 = 0 THEN 'Private Clinic ' + CAST(n as varchar(10))
        WHEN n % 3 = 0 THEN 'Research Institute ' + CAST(n as varchar(10))
        ELSE 'Medical Laboratory ' + CAST(n as varchar(10))
    END,
    'template_' + CAST((n % 10) + 1 as varchar(10)) + '.docx',
    CASE 
        WHEN n % 10 = 0 THEN NULL 
        ELSE (SELECT TOP 1 Id_PrintTemplate FROM [dbo].[PrintTemplate] ORDER BY NEWID())
    END,
    'contact@org' + CAST(n as varchar(10)) + '.com',
    CASE WHEN n % 3 = 0 THEN 'billing@org' + CAST(n as varchar(10)) + '.com' ELSE NULL END,
    CASE WHEN n % 2 = 0 THEN '+1-555-' + RIGHT('0000' + CAST(1000 + (n % 9000) as varchar(10)), 4) ELSE NULL END,
    CASE WHEN n % 4 = 0 THEN '+1-555-' + RIGHT('0000' + CAST(2000 + (n % 8000) as varchar(10)), 4) ELSE NULL END
FROM (SELECT TOP 200 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as n FROM master.dbo.spt_values WHERE number < 200) nums;

-- Select Types
INSERT INTO [dbo].[SelectType] ([SelectType])
VALUES 
('Standard'),
('Priority'),
('Express'),
('Research'),
('Validation');

-- Work Statuses
INSERT INTO [dbo].[WorkStatus] ([StatusName])
VALUES 
('Registered'),
('In Progress'),
('Partially Completed'),
('Completed'),
('Verified'),
('Delivered'),
('Archived');

-- Generate 200 different test types
INSERT INTO [dbo].[Analiz] ([IS_GROUP], [MATERIAL_TYPE], [CODE_NAME], [FULL_NAME], [ID_ILL], [Text_Norm], [Price], [NormText], [UnNormText])
SELECT 
    CASE WHEN n % 10 = 0 THEN 1 ELSE 0 END,
    n % 5,
    'TEST-' + RIGHT('000' + CAST(n as varchar(10)), 3),
    CASE 
        WHEN n % 20 = 0 THEN 'Comprehensive Metabolic Panel ' + CAST(n as varchar(10))
        WHEN n % 15 = 0 THEN 'Hematology Profile ' + CAST(n as varchar(10))
        WHEN n % 10 = 0 THEN 'Lipid Panel ' + CAST(n as varchar(10))
        WHEN n % 5 = 0 THEN 'Thyroid Function Test ' + CAST(n as varchar(10))
        ELSE 'Specialized Test ' + CAST(n as varchar(10))
    END,
    CASE WHEN n % 3 = 0 THEN n % 100 ELSE NULL END,
    CASE 
        WHEN n % 20 = 0 THEN 'Normal range: 70-99 mg/dL'
        WHEN n % 15 = 0 THEN 'Reference: 4.5-11.0 x10^9/L'
        WHEN n % 10 = 0 THEN 'Expected: <200 mg/dL'
        WHEN n % 5 = 0 THEN 'Standard: 0.4-4.0 mIU/L'
        ELSE 'Varies by method'
    END,
    ROUND((10 + (n % 90) + (RAND() * 20)), 2),
    CASE 
        WHEN n % 20 = 0 THEN 'This test measures glucose, electrolytes, and kidney function.'
        WHEN n % 15 = 0 THEN 'Complete blood count with differential.'
        WHEN n % 10 = 0 THEN 'Measures cholesterol and triglycerides.'
        WHEN n % 5 = 0 THEN 'Evaluates thyroid gland function.'
        ELSE 'Specialized diagnostic test.'
    END,
    CASE 
        WHEN n % 20 = 0 THEN 'Abnormal results may indicate diabetes or kidney disease.'
        WHEN n % 15 = 0 THEN 'Abnormal counts may suggest infection or blood disorder.'
        WHEN n % 10 = 0 THEN 'High levels may indicate increased cardiovascular risk.'
        WHEN n % 5 = 0 THEN 'Abnormal levels may suggest hypo- or hyperthyroidism.'
        ELSE 'Consult physician for interpretation.'
    END
FROM (SELECT TOP 200 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as n FROM master.dbo.spt_values WHERE number < 200) nums;

-- Generate 50,000 work orders with proper foreign key references
INSERT INTO [dbo].[Works] (
    [IS_Complit], [CREATE_Date], [Close_Date], [Id_Employee], [ID_ORGANIZATION], 
    [Comment], [Org_Name], [Material_Type], [Material_Get_Date], [Material_Reg_Date], 
    [MaterialNumber], [FIO], [PHONE], [EMAIL], [Is_Del], [Price], 
    [ExtRegN], [MedicalHistoryNumber], [DoctorFIO], [DoctorPhone], 
    [OrganizationFax], [OrganizationEmail], [DoctorEmail], [StatusId]
)
SELECT TOP 50000
    CASE WHEN n % 10 < 8 THEN 1 ELSE 0 END,
    DATEADD(MINUTE, -(ABS(CHECKSUM(NEWID())) % 525600), GETDATE()),
    CASE WHEN n % 10 < 8 THEN DATEADD(MINUTE, ABS(CHECKSUM(NEWID())) % 10080, DATEADD(MINUTE, -(ABS(CHECKSUM(NEWID())) % 525600), GETDATE())) ELSE NULL END,
    e.Id_Employee,
    o.ID_ORGANIZATION,
    CASE 
        WHEN n % 20 = 0 THEN 'Priority sample'
        WHEN n % 15 = 0 THEN 'Research study participant'
        WHEN n % 10 = 0 THEN 'Repeat testing required'
        WHEN n % 5 = 0 THEN 'Special handling instructions'
        ELSE NULL
    END,
    o.ORG_NAME,
    ABS(CHECKSUM(NEWID())) % 5,
    DATEADD(MINUTE, -(ABS(CHECKSUM(NEWID())) % 10080), DATEADD(MINUTE, -(ABS(CHECKSUM(NEWID())) % 525600), GETDATE())),
    DATEADD(MINUTE, -(ABS(CHECKSUM(NEWID())) % 10080), DATEADD(MINUTE, -(ABS(CHECKSUM(NEWID())) % 525600), GETDATE())),
    100000 + n,
    -- Guaranteed non-NULL FIO
    CASE 
        WHEN n % 2 = 0 THEN 'Patient ' + CAST(n as varchar(50))
        ELSE e.Surname + ' ' + e.Name
    END,
    '+1-555-' + RIGHT('0000' + CAST(1000 + (n % 9000) as varchar(10)), 4),
    CASE WHEN n % 3 = 0 THEN 'patient' + CAST(n as varchar(50)) + '@email.com' ELSE NULL END,
    0,
    ROUND((50 + (n % 450) + (RAND() * 100)), 2),
    CASE WHEN n % 5 = 0 THEN 'EXT-' + CAST(10000 + n as varchar(50)) ELSE NULL END,
    CASE WHEN n % 4 = 0 THEN 'MH-' + CAST(50000 + n as varchar(50)) ELSE NULL END,
    CASE 
        WHEN n % 3 = 0 THEN 'Dr. ' + (SELECT TOP 1 Surname FROM [dbo].[Employee] WHERE Id_Employee <> e.Id_Employee ORDER BY NEWID())
        WHEN n % 2 = 0 THEN 'Dr. ' + (SELECT TOP 1 Name FROM [dbo].[Employee] WHERE Id_Employee <> e.Id_Employee ORDER BY NEWID()) + ' ' + 
                          (SELECT TOP 1 Surname FROM [dbo].[Employee] WHERE Id_Employee <> e.Id_Employee ORDER BY NEWID())
        ELSE NULL
    END,
    CASE WHEN n % 3 = 0 THEN '+1-555-' + RIGHT('0000' + CAST(2000 + (n % 8000) as varchar(10)), 4) ELSE NULL END,
    CASE WHEN n % 5 = 0 THEN '+1-555-' + RIGHT('0000' + CAST(3000 + (n % 7000) as varchar(10)), 4) ELSE NULL END,
    o.Email,
    CASE WHEN n % 6 = 0 THEN 'doctor' + CAST(n as varchar(50)) + '@email.com' ELSE NULL END,
    1 + (ABS(CHECKSUM(NEWID())) % 7)
FROM 
    (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as n FROM master.dbo.spt_values a CROSS JOIN master.dbo.spt_values b WHERE a.number < 1000 AND b.number < 50) nums
CROSS APPLY (SELECT TOP 1 * FROM [dbo].[Employee] ORDER BY NEWID()) e
CROSS APPLY (SELECT TOP 1 * FROM [dbo].[Organization] ORDER BY NEWID()) o
WHERE n <= 50000;

-- Generate work items (average 3 per order) with valid foreign key references
WITH OrderNumbers AS (
    SELECT Id_Work, ROW_NUMBER() OVER (ORDER BY Id_Work) as OrderID 
    FROM [dbo].[Works]
),
OrderItems AS (
    SELECT 
        o.OrderID,
        1 + (ABS(CHECKSUM(NEWID())) % 5) as ItemCount
    FROM OrderNumbers o
),
ItemDetails AS (
    SELECT 
        o.Id_Work,
        i.n as ItemNum,
        a.ID_ANALIZ as AnalizID,
        -- Get a valid SelectType ID
        (SELECT TOP 1 Id_SelectType FROM [dbo].[SelectType] ORDER BY NEWID()) as SelectTypeID
    FROM OrderNumbers o
    CROSS JOIN (SELECT TOP 5 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as n FROM master.dbo.spt_values WHERE number < 5) i
    JOIN OrderItems oi ON o.OrderID = oi.OrderID
    CROSS APPLY (SELECT TOP 1 * FROM [dbo].[Analiz] ORDER BY NEWID()) a
    WHERE i.n <= oi.ItemCount
)
INSERT INTO [dbo].[WorkItem] (
    [CREATE_DATE], [Is_Complit], [Close_Date], [Id_Employee], [ID_ANALIZ], 
    [Id_Work], [Is_Print], [Is_Select], [Is_NormTextPrint], [Price], [Id_SelectType]
)
SELECT 
    DATEADD(MINUTE, ABS(CHECKSUM(NEWID())) % 1440, w.CREATE_Date),
    CASE WHEN w.IS_Complit = 1 AND i.ItemNum % 10 > 1 THEN 1 ELSE 0 END,
    CASE WHEN w.IS_Complit = 1 AND i.ItemNum % 10 > 1 THEN DATEADD(MINUTE, ABS(CHECKSUM(NEWID())) % 1440, DATEADD(HOUR, 2 + (ABS(CHECKSUM(NEWID())) % 48), w.CREATE_Date)) ELSE NULL END,
    w.Id_Employee,
    i.AnalizID,
    w.Id_Work,
    1,
    CASE WHEN i.ItemNum % 10 = 0 THEN 1 ELSE 0 END,
    1,
    (SELECT Price FROM [dbo].[Analiz] WHERE ID_ANALIZ = i.AnalizID),
    i.SelectTypeID  -- Use the pre-selected valid SelectType ID
FROM ItemDetails i
JOIN [dbo].[Works] w ON i.Id_Work = w.Id_Work;

-- Update some works to have print/send dates
UPDATE [dbo].[Works]
SET 
    [Print_Date] = CASE WHEN StatusId > 3 THEN DATEADD(HOUR, 2 + (ABS(CHECKSUM(NEWID())) % 48), [Close_Date]) ELSE NULL END,
    [SendToOrgDate] = CASE WHEN StatusId > 4 AND Id_Work % 3 = 0 THEN DATEADD(HOUR, 3 + (ABS(CHECKSUM(NEWID())) % 24), [Close_Date]) ELSE NULL END,
    [SendToClientDate] = CASE WHEN StatusId > 4 AND Id_Work % 4 = 0 THEN DATEADD(HOUR, 4 + (ABS(CHECKSUM(NEWID())) % 24), [Close_Date]) ELSE NULL END,
    [SendToDoctorDate] = CASE WHEN StatusId > 4 AND Id_Work % 5 = 0 THEN DATEADD(HOUR, 5 + (ABS(CHECKSUM(NEWID())) % 24), [Close_Date]) ELSE NULL END,
    [SendToFax] = CASE WHEN StatusId > 4 AND Id_Work % 6 = 0 THEN DATEADD(HOUR, 6 + (ABS(CHECKSUM(NEWID())) % 24), [Close_Date]) ELSE NULL END
WHERE [IS_Complit] = 1;

-- Update some works to be deleted
UPDATE [dbo].[Works]
SET 
    [Is_Del] = 1,
    [Id_Employee_Del] = (SELECT TOP 1 Id_Employee FROM [dbo].[Employee] ORDER BY NEWID()),
    [DelDate] = DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 30, [Close_Date])
WHERE Id_Work % 100 = 0;
